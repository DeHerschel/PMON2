#!/bin/bash
source /var/lib/pmon2/makejson
unset HOST;
unset PTIME;
unset PICMP;
unset PTTL;
ERRORMODE=0;
LAST_PICMP=0
problems=0;

function getStats() {
	local pingLine=$1;
	local pingLine=($pingLine)
	local lost=0;
	PROBLEMS=0;
	STATE='NORMAL';
	LOST=0;
	PTIME=${pingLine[-2]:5};
	PTTL=${pingLine[-3]:4};
	PICMP=${pingLine[-4]:9};
	# split PTIME in an array with the dot as 
	# separator to quit decimals because
	# a priori don't know how much decimals
	# there will be (if 1 or 2)
	IFS='.' read -ra PTIMESPLIT <<< $PTIME;
	if [[ ${PTIMESPLIT[0]} -lt 22 ]]; then 
		STATE='GOOD';
	elif [[ ${PTIMESPLIT[0]} -gt 60 ]]; then
		STATE='BAD';
	fi
	[[ $(($PICMP-1)) -eq $LAST_PICMP ]] || {
		let problems=$problems+1;
		sqlite3 $DB "INSERT INTO problems ('type', 'description', 'target') values ('DOWN', 'HOST IS DOWN', (SELECT id FROM targets WHERE IP = '$HOST'))"
		let lost=$lost+1;
		LOST=$lost
		PROBLEMS=$problems;

	}
}
function mail() {
	if [[ $mail_when_down == "on" ]]; then
		sqlite3 $DB "SELECT email FROM Users WHERE role_id = (SELECT role_id FROM role_target WHERE target_id = (SELECT id FROM Targets WHERE IP = '$HOST'))" | while read -r mail; do
			echo "The host $HOST is down" | mail -s "HOST DOWN" $mail
		done
		sqlite3 $DB "SELECT email FROM Users WHERE role_id = '1'" | while read -r mail; do
			echo "The host $HOST is down" | mail -s "HOST DOWN" $mail
		done
	fi
}




function pingHost() { #ARGS: HOST [nhost as a service]
	local isfirstline=1;
	local aae=0; #alive after errors
	HOST=$1;
	nhost=$2
	[[ $IFC ]] && local ifcopt="-I $IFC"; 
	ping -O $HOST $ifcopt | while read -r line; do #pingLine and read lines
		if [[ "$line" =~ "Unreachable" ]] || [[ "$line" =~ "no answer" ]]; then
			#no answer ---> eroor mode ---> alert & log
			aae=0;
			[ "$ERRORMODE" -eq 1 ] && {	
				downJSON $HOST;
				continue;
			}
			downJSON $HOST;
			hostdownMsg;
			mail
			ERRORMODE=1;
		else #good answer
				
			[ $isfirstline -eq 1 ] && {
				isfirstline=0;
				continue;
			}
		
			getStats "$line"
			#error mode = 1
			if [ $ERRORMODE -eq 1 ]; then
				let aae=aae+1; #count aae
				[ "$aae" -eq 1 ] && { #first good pingLine after error
					inestableJSON $HOST;
					hostUpMsg;
					continue;
				}
				[ "$aae" -eq 30 ] && { #30 good pingLine after error ends error mode
					dataJSON $HOST;
					hoststableMsg
					aae=0; #reset AAE
					ERRORMODE=0;
					continue;
				}
				inestableJSON $HOST;
				waitingstableMsg;
				continue;
			fi
			dataJSON $HOST;
			pingMsg
			LAST_PICMP=$PICMP;
		fi
	done  &
	pingpids=(${pingpids[@]} $!);
	echo $! >> /var/run/pmond.pids
	HOSTDATA[PINGPID]=$!
}